// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tasks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, board_id, created_at, updated_at, name, description, icon, status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, board_id, created_at, updated_at, name, description, icon, status
`

type CreateTaskParams struct {
	ID          uuid.UUID
	BoardID     uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
	Icon        int32
	Status      string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.BoardID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Status,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, board_id, created_at, updated_at, name, description, icon, status
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Status,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name=$1, description=$2, icon=$3, status=$4
RETURNING id, board_id, created_at, updated_at, name, description, icon, status
`

type UpdateTaskParams struct {
	Name        string
	Description string
	Icon        int32
	Status      string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.BoardID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
		&i.Icon,
		&i.Status,
	)
	return i, err
}
