// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: boards.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (id, created_at, updated_at, name, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, name, description
`

type CreateBoardParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Description,
	)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getBoard = `-- name: GetBoard :one
SELECT id, created_at, updated_at, name, description FROM boards WHERE id = $1
`

func (q *Queries) GetBoard(ctx context.Context, id uuid.UUID) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, id)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}
